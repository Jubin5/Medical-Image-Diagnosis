# -*- coding: utf-8 -*-
"""StreamlitNewChest.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vLV3n2KQbIPbuF9n7PBmvSM-AZKnURXp
"""

import streamlit as st
import numpy as np
import tensorflow as tf
import cv2
from tensorflow.keras.models import load_model, Model
from tensorflow.keras.preprocessing import image
from PIL import Image

# Load the saved model
model = load_model("C:\Users\jubin\Downloads\ensemble_cxr_new_model.keras")

# Extract VGG16 sub-model (first input branch) for Grad-CAM
vgg_model = Model(inputs=model.input[0], outputs=model.get_layer(index=3).output)  # last conv layer of VGG
last_conv_layer_name = "block5_conv3"

# Helper to get Grad-CAM
def get_grad_cam(img_array, model, layer_name):
    grad_model = Model(
        inputs=[model.inputs],
        outputs=[model.get_layer(layer_name).output, model.output]
    )

    with tf.GradientTape() as tape:
        conv_outputs, predictions = grad_model([img_array, img_array])
        loss = predictions[:, 0]

    grads = tape.gradient(loss, conv_outputs)
    pooled_grads = tf.reduce_mean(grads, axis=(1, 2))

    conv_outputs = conv_outputs[0]
    pooled_grads = pooled_grads[0]

    heatmap = tf.reduce_sum(tf.multiply(pooled_grads, conv_outputs), axis=-1)
    heatmap = np.maximum(heatmap, 0)
    heatmap /= tf.math.reduce_max(heatmap) + 1e-8
    return heatmap.numpy()

# Preprocess input image
def preprocess_image(img):
    img = img.convert("RGB")
    img = img.resize((224, 224))
    img_array = image.img_to_array(img) / 255.0
    return np.expand_dims(img_array, axis=0)

# Overlay heatmap on image
def overlay_heatmap(original_img, heatmap, alpha=0.5):
    heatmap = cv2.resize(heatmap, (224, 224))
    heatmap = np.uint8(255 * heatmap)
    heatmap_color = cv2.applyColorMap(heatmap, cv2.COLORMAP_JET)

    original_img = np.array(original_img.resize((224, 224)))
    if original_img.shape[-1] == 1:
        original_img = np.repeat(original_img, 3, axis=-1)
    overlayed_img = cv2.addWeighted(original_img, 1 - alpha, heatmap_color, alpha, 0)
    return overlayed_img

# Streamlit UI
st.set_page_config(page_title="Chest X-ray Classification with Grad-CAM")
st.title("🫁 Chest X-ray Pneumonia Detection with Grad-CAM")
st.write("Upload a chest X-ray image to classify and visualize model attention.")

uploaded_file = st.file_uploader("Choose a chest X-ray image", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    image_raw = Image.open(uploaded_file)
    st.image(image_raw, caption="Uploaded Chest X-ray", use_column_width=True)

    img_array = preprocess_image(image_raw)

    # Prediction
    prediction = model.predict([img_array, img_array])[0][0]
    label = "Pneumonia" if prediction >= 0.5 else "Normal"
    confidence = prediction if prediction >= 0.5 else 1 - prediction

    st.subheader("Prediction:")
    st.markdown(f"**{label}** (Confidence: `{confidence:.2f}`)")

    # Grad-CAM
    st.subheader("Grad-CAM Heatmap (VGG16 branch):")
    heatmap = get_grad_cam(img_array, model, last_conv_layer_name)
    overlay_img = overlay_heatmap(image_raw, heatmap)

    st.image(overlay_img, caption="Grad-CAM Overlay", use_column_width=True)
